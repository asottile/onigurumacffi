trigger:
  branches:
    include: [main, test-me-*]
  tags:
    include: ['*']

resources:
  repositories:
    - repository: asottile
      type: github
      endpoint: github
      name: asottile/azure-pipeline-templates
      ref: refs/tags/v2.4.0

jobs:
- template: job--python-tox.yml@asottile
  parameters:
    toxenvs: [py37]
    os: windows
    architectures: [x64, x86]
    wheel_tags: true
    additional_variables:
      ONIGURUMA_CLONE: $(Pipeline.Workspace)\oniguruma
    pre_test:
    - task: Cache@2
      inputs:
        key: windows-oniguruma | bin/clone-oniguruma | "$(arch)"
        path: $(ONIGURUMA_CLONE)
        cacheHitVar: ONIGURUMA_CACHE
    - bash: ./bin/clone-oniguruma
      condition: ne(variables.ONIGURUMA_CACHE, 'true')
      displayName: clone oniguruma
    - script: |
        call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" $(arch)
        cd %ONIGURUMA_CLONE%
        make_win.bat
      condition: ne(variables.ONIGURUMA_CACHE, 'true')
      displayName: build oniguruma
- template: job--python-tox.yml@asottile
  parameters:
    toxenvs: [py37]
    os: macos
    wheel_tags: true
    additional_variables:
      ONIGURUMA_CLONE: $(Pipeline.Workspace)/oniguruma
    pre_test:
    - bash: brew install autoconf automake libtool
      displayName: install autotools
    - task: Cache@2
      inputs:
        key: macos-oniguruma | bin/clone-oniguruma
        path: $(ONIGURUMA_CLONE)
        cacheHitVar: ONIGURUMA_CACHE
    - bash: |
        ./bin/clone-oniguruma
        cd "$ONIGURUMA_CLONE"
        ./autogen.sh && ./configure && make -j4
      condition: ne(variables.ONIGURUMA_CACHE, 'true')
      displayName: clone and build oniguruma
    - bash: sudo make -C "$ONIGURUMA_CLONE" install
      displayName: install oniguruma
- template: job--python-tox.yml@asottile
  parameters:
    toxenvs: [py37, py38, py39]
    os: linux
    additional_variables:
      ONIGURUMA_CLONE: $(Pipeline.Workspace)/oniguruma
    pre_test:
    - task: Cache@2
      inputs:
        key: linux-oniguruma | bin/clone-oniguruma
        path: $(ONIGURUMA_CLONE)
        cacheHitVar: ONIGURUMA_CACHE
    - bash: |
        ./bin/clone-oniguruma
        cd "$ONIGURUMA_CLONE"
        ./autogen.sh && ./configure && make -j4
      condition: ne(variables.ONIGURUMA_CACHE, 'true')
      displayName: clone and build oniguruma
    - bash: sudo make -C "$ONIGURUMA_CLONE" install && sudo ldconfig
      displayName: install oniguruma
